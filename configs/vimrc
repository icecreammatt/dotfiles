" Modeline and Notes {
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker:
"
" Vim folding commands
" zf#j creates a fold from the cursor down # lines.
" zf/string creates a fold from the cursor to string .
" zj moves the cursor to the next fold.
" zk moves the cursor to the previous fold.
" zo opens a fold at the cursor.
" zO opens all folds at the cursor.
" zm increases the foldlevel by one.
" zM closes all open folds.
" zr decreases the foldlevel by one.
" zR decreases the foldlevel to zero -- all folds will be open.
" zd deletes the fold at the cursor.
" zE deletes all folds.
" [z move to start of open fold.
" ]z move to end of open fold.

"}

" Plugins {
call plug#begin('~/.vim/plugged')

" let Vundle manage Vundle
" required! 
Plug 'gmarik/vundle'

" iA Writer vim colorscheme
" Plug 'https://github.com/jacekd/vim-iawriter'

"{ Go development plugin for Vim
Plug 'fatih/vim-go'
let $GOPATH = $HOME."/go"
"setlocal omnifunc=go#complete#Complete
"verbose setlocal omnifunc?
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
"}

"  Base16 for Vim https://github.com/chriskempson/base16
Plug 'chriskempson/base16-vim'

" Molokai color scheme for Vim
" Plug 'tomasr/molokai'

" Simulating a vaguely WriteRoom-like environment in Vim. 
Plug 'https://github.com/mikewest/vimroom'

" vim syntax for LESS (dynamic CSS)
Plug 'groenewege/vim-less'

" Vim syntax highlighting for GCSS
" Plug 'yosssi/vim-gcss'

" Write CSS faster http://ricostacruz.com/vim-hyperstyle/
" Plug 'rstacruz/vim-hyperstyle'

" vim plugin which formated javascript files by js-beautify
" Plug 'maksimr/vim-jsbeautify'

" Beautifier for javascript
Plug 'einars/js-beautify'

" List of JavaScript ES6 snippets and syntax highlighting for vim. 
Plug 'isRuslan/vim-es6'

" Vim syntax highlighting for Go templates.
" Plug 'cespare/vim-go-templates'

" mustache and handlebars mode for vim
Plug 'mustache/vim-mustache-handlebars'

"  A better JSON for Vim: distinct highlighting of keywords vs values,
"  JSON-specific (non-JS) warnings, quote concealing. Pathogen-friendly. 
Plug 'elzr/vim-json'
let g:vim_json_syntax_conceal = 0

" javascript syntax
" Plug 'jelera/vim-javascript-syntax'

" Vastly improved Javascript indentation and syntax support in Vim.
Plug 'pangloss/vim-javascript'

" React JSX syntax highlighting and indenting for vim.
Plug 'mxw/vim-jsx'

"EditorConfig plugin for Vim http://editorconfig.org
Plug 'editorconfig/editorconfig-vim'

" Vim plugin that displays tags in a window, ordered by scope
" Plug 'majutsushi/tagbar'

" A Vim plugin for visually displaying indent levels in code
" Plug 'nathanaelkane/vim-indent-guides'
" hi IndentGuidesOdd  ctermbg=black
" hi indentguideseven ctermbg=darkgrey
" let g:indent_guides_start_level = 2
" let g:indent_guides_guide_size = 1

" Vim plugin, provides insert mode auto-completion for quotes, parens,
"brackets, etc.
Plug 'Raimondi/delimitMate'

" git diff marks in gutter
Plug 'airblade/vim-gitgutter'

" syntax highlighting"
Plug 'othree/javascript-libraries-syntax.vim'

" Vim Markdown runtime files
Plug 'tpope/vim-markdown'

" surround.vim: quoting/parenthesizing made simple
Plug 'tpope/vim-surround'

"{ commentary.vim: comment stuff out
Plug 'tpope/vim-commentary'
autocmd FileType python set commentstring=#\ %s
autocmd FileType bash set commentstring=#\ %s
autocmd FileType sh set commentstring=#\ %s
autocmd FileType makefile set commentstring=#\ %s
autocmd FileType conf set commentstring=#\ %s
autocmd FileType zsh set commentstring=#\ %s
autocmd FileType Dockerfile set commentstring=#\ %s
autocmd FileType vim set commentstring=\"\ %s
autocmd FileType javascript set commentstring=\/\/\ %s
autocmd FileType xml set commentstring=\<!--\ %s
"}

" capslock.vim: Software caps lock
" Plug 'tpope/vim-capslock'

" repeat.vim: enable repeating supported plugin maps with .
Plug 'tpope/vim-repeat'

"
Plug 'ryanoasis/vim-devicons'

" fugitive.vim: a Git wrapper so awesome, it should be illegal
Plug 'tpope/vim-fugitive'

" A command-line fuzzy finder written in Go 
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

Plug 'w0rp/ale'

"{ lean & mean status/tabline for vim that's light as air"
" Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_powerline_fonts = 0
" let g:airline_theme='powerlineish'
" let g:airline_theme='base16'
let g:airline_theme='tomorrow'
let g:tmuxline_powerline_separators = 0
set laststatus=2

" if !exists('g:airline_symbols')
"     let g:airline_symbols = {}
" endif
" let g:airline_symbols.space = "\ua0"

let g:bufferline_echo = 0
set noshowmode
set ttimeoutlen=25

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_alt_sep = ' '
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#right_alt_sep = ' '
let g:airline#extensions#tabline#right_sep = ' '

let g:airline#extensions#whitespace#enabled = 0
"let g:airline_section_z = '' " Hide bottom right hand content

" Only show the tabs if at least 3 files are open
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_min_count = 3

" Remove > and < style
let g:airline_left_sep = '' 
let g:airline_right_sep = ''
"}

" Simple tmux statusline generator with support for powerline symbols and
" airline integration"
" Plug 'edkolev/tmuxline.vim'

" Syntax Highlighting for Stylus
" Plug 'wavded/vim-stylus'

" Vim Jade template engine syntax highlighting and indention
" Plug 'digitaltoad/vim-jade'

" Vim support for Rust file detection and syntax highlighting.
" Plug 'wting/rust.vim'

" Vim syntax for TOML
Plug 'cespare/vim-toml'

"{ Syntax checking hacks for vim
"Plug 'scrooloose/syntastic'
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol='⚠'

let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'
highlight clear ALEErrorSign
highlight clear ALEWarningSign
let g:airline#extensions#ale#enabled = 1
let g:ale_linters = {
\   'javascript': ['eslint'],
\}
"g:ale_lint_on_text_changed

"let g:syntastic_auto_jump=1
" nnoremap <leader>js :w<CR>:make<CR>:cw<CR>
" This does what it says on the tin. It will check your file on open too, not
" just on save.
" " You might not want this, so just leave it out if you don't.
let g:syntastic_check_on_open=1
" http://oli.me.uk/2013/06/29/equipping-vim-for-javascript/
"}

"A tree explorer plugin for vim.
Plug 'scrooloose/nerdtree'
let NERDTreeIgnore=['\.pyc$', '\.o$', '\~$', 'node_modules$', 'build$', '\.git', '\.svn']

" A plugin of NERDTree showing git status
Plug 'Xuyuanp/nerdtree-git-plugin'

"Vim local themes for powerline
" Plug 'zhaocai/linepower.vim'

"Seamless navigation between tmux panes and vim splits
Plug 'christoomey/vim-tmux-navigator'

"Vim motions on speed!
Plug 'Lokaltog/vim-easymotion'

" code autocompletion
" NOTE: Requires extra compilation setup
Plug 'Valloric/YouCompleteMe'

" UltiSnips - The ultimate snippet solution for Vim. Send pull requests to SirVer/ultisnips!
Plug 'sirver/ultisnips'

Plug 'honza/vim-snippets'

let g:UltiSnipsExpandTrigger="<c-j>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

"Typescript syntax files for Vim
Plug 'leafgarland/typescript-vim'

" Vim configuration for Rust.
" Plug 'rust-lang/rust.vim'

"True Sublime Text style multiple selections for Vim
" Plug 'kristijanhusak/vim-multiple-cursors'
Plug 'terryma/vim-multiple-cursors'

call plug#end()

filetype on
filetype plugin indent on
" }

"{ Theme settings
set encoding=utf8
set guifont=UbuntuMono:h14
let g:airline_powerline_fonts = 1

syntax on
set background=light

" === molokai Settings ===
" set t_Co=256
"colorscheme molokai
" === End molokai Settings ===

" === Base16 Settings ===
let base16colorspace=256
" colorscheme base16-tomorrow
" highlight! link MatchParen StatusLine
" hi CursorLine   cterm=reverse "keeping this one just for reference
" hi CursorLine   cterm=NONE ctermfg=black ctermbg=white
hi CursorLine   cterm=NONE ctermbg=white
hi CursorLineNr cterm=NONE ctermfg=black ctermbg=white
hi Search cterm=NONE ctermfg=black ctermbg=white

set cursorline
" autocmd InsertEnter * highlight CursorLine guifg=white guibg=blue ctermfg=white ctermbg=blue
" autocmd InsertLeave * highlight CursorLine guifg=white guibg=darkblue ctermfg=white ctermbg=darkblue

" :autocmd InsertEnter * set cul
" :autocmd InsertLeave * set nocul

:autocmd InsertEnter,InsertLeave * set cul!
" === End Base16 Settings ===
"}

"{ General settings
"set listchars=tab:▸\ ,eol:
"set list " View whitespace
cmap w!! w !sudo tee > /dev/null %

set ignorecase
set hlsearch
set incsearch

set ts=4
set expandtab
set shiftwidth=4
set autoindent

set number
set backspace=indent,eol,start
" if $TMUX == ''
"     set clipboard+=unnamed
" endif
set directory=$HOME/.vim/swapfiles//
"}

"{ Abbreviations
ab heart ❤
ab teh the
ab [heart] ❤
ab [cmd] ⌘
ab [shift] ⇧
ab [option] ⌥
ab [opt] ⌥
ab [ctrl] ⌃
ab [tab] ⇥
ab [section] §
ab [lozenge] ◊
ab [interpunct] ·
ab [reference] ※
ab [em]  
ab [en]  
ab [ellipse] …     
ab [bar] ―
ab [la] ←
ab [ra] →
ab [pi] π
"}

"{ Key remapping

let mapleader = ","

" Markdown preview
nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr> :redraw!<cr>

nnoremap gb <C-o>

"This unsets the "last search pattern" register by hitting return
"nnoremap <esc> :noh<CR><esc>
"nnoremap <esc> :noh<return><esc>

" Allows tab to indent and switch between tabs
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
nnoremap <S-TAB> :bprev<CR>
nnoremap <TAB> :bnext<CR>

" Disable annoying lookup
noremap K <Esc>

noremap H ^
noremap L $

noremap <UP> <NOP>
noremap <DOWN> <NOP>
noremap <LEFT> <NOP>
noremap <RIGHT> <NOP>

nnoremap <space> <C-d>
nnoremap <leader><space> <C-u>

nnoremap <c-p> :FZF<CR>

noremap <c-s> :w<CR>
imap <c-s> <Esc>:w<CR>a
imap <c-s> <Esc><c-s>

imap jk <Esc>

map <leader>l <Plug>(easymotion-lineforward)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
map <leader>h <Plug>(easymotion-linebackward)

" Use <leader>p to toggle between 'paste' and 'nopaste'
nmap <leader>p :set paste!<CR>

map <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>
map <leader>b :NERDTreeToggle<CR>
map <leader>f :NERDTreeFind<CR>
map <leader>n :set number!<CR>
map <leader>e :s/&/\r&/g<CR>

map <F6> :setlocal spell! spelllang=en_us<CR>
nmap <F8> :TagbarToggle<CR>
"}

"{ NERDTree Settings
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"}

"{ FileType mappings
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

au FileType go nmap <leader>r <Plug>(go-run)
"au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
"au FileType go nmap <leader>c <Plug>(go-coverage)

au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>e <Plug>(go-rename)

autocmd FileType make setlocal noexpandtab
autocmd FileType Javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType gcss setlocal shiftwidth=2 tabstop=2
autocmd FileType go set nolist
"}

"{ Easymotion
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
map / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map n <Plug>(easymotion-next)
map N <Plug>(easymotion-prev)
"}

"{ Distraction free mode
" turn-on distraction free writing mode for markdown files
au BufNewFile,BufRead *.{txt,md,mdown,mkd,mkdn,markdown,mdwn,apib} call DistractionFreeWriting()
function! DistractionFreeWriting()
    "colorscheme iawriter
    "set background=light
    set lines=40 columns=120           " size of the editable area
    set laststatus=0                   " don't show status line
    set noruler                        " don't show ruler
    set linebreak                      " break the lines on words
    set nonumber                       " hide line numbers
    set filetype=markdown
endfunction
"}

"{ Multi cursor settings
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_start_key='<leader>c'
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
"}

"{ Jump to the last position of the cursor except for git commits
function! PositionCursorFromViminfo()
    if !(bufname("%") =~ '\(COMMIT_EDITMSG\)') && line("'\"") > 1 && line("'\"") <= line("$")
        exe "normal! g`\""
    endif
endfunction
au BufReadPost * call PositionCursorFromViminfo()
 
" Jump to the last position of the cursor
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
"}

"{ Open URL under cursor in browser
function! WebView()
    "let url = expand("<cword>")
    let url=matchstr(@0, '[a-zA-Z0-9-\.]*:\/\/[^ >,;]*')
    let path="/Applications/Firefox.app"
    if url != ""
        silent exec "!open -a ".path." '".url."'" | redraw!
    "exec 'silent !"' open . url
    else
        echo "No URL under cursor."
    endif
endfun
nnoremap <leader>o :call WebView()<CR>
"}
"

" Files + devicons
function! Fzf_dev()
  function! s:files()
    let files = split(system($FZF_DEFAULT_COMMAND), '\n')
    return s:prepend_icon(files)
  endfunction

  function! s:prepend_icon(candidates)
    let result = []
    for candidate in a:candidates
      let filename = fnamemodify(candidate, ':p:t')
      let icon = WebDevIconsGetFileTypeSymbol(filename, isdirectory(filename))
      call add(result, printf("%s %s", icon, candidate))
    endfor

    return result
  endfunction

  function! s:edit_file(item)
    let parts = split(a:item, ' ')
    let file_path = get(parts, 1, '')
    execute 'silent e' file_path
  endfunction

  call fzf#run({
        \ 'source': <sid>files(),
        \ 'sink':   function('s:edit_file'),
        \ 'options': '-m -x +s',
        \ 'down':    '40%' })
endfunction

let $FZF_DEFAULT_COMMAND = 'ag --hidden -l -g ""'
